<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- #5. appServlet관련 설정: servlet-context에 대한 설정으로 하나의 어플리케이션 당 하나 이상일 수 있다. -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- /src/main/webapp/resources폴더: image, css, js, 기타파일에 대한 경로 사용자 요청 /resources/** 있을 경우, 해당 디렉토리에서 처리함 -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- #15.1 jsonView Bean 및 viewResolver 등록 -->
	<!-- 요청한 viewName과 실제bean이름을 매핑해주는 BeanNameViewResolver를 사용함. -->
    <!-- bean아이디는 viewResolver로 반드시 지정. 처리순서를 1로 우선처리되도록함. -->
    <beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <beans:property name="order" value="1"/>
    </beans:bean>   
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>	
    <!-- #16.1 @Responsebody사용을 위한 의존 : 빈등록 (스프링 5.x.x => MappingJackson2HttpMessageConverter) -->
	<beans:bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jacksonMessageConverter"/>
                <beans:bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- 스프링 컨테이너에 빈(bean)객체를 등록
	해당패키지 밑에 있는 java파일중에 @Component 어노테이션이 붙은 클래스는 빈으로 등록함. 기본적으로 깅글톤패턴 관리 -->
	
	<context:component-scan base-package="com.kh.market" />
	
	<!-- #10.로깅을 위한 interceptor등록 -->
	<!-- DispatcherServlet이 Controller를 호출하는 중간에 intercept한다. -->
	<!-- 그래서 이 설정은 web.xml의 DispatcherServlet의 servlet-context.xml에 있다. -->
	<interceptors>
		<interceptor>
			<mapping path="/auction/auctionEnroll.do"/>
			<mapping path="/auction/auctionEnrollEnd.do"/>
			<mapping path="/auction/auctionSelectOne.do"/>
			<mapping path="/auction/updateAuction.do"/>
			<mapping path="/auction/ingPrice.do"/>
			<mapping path="/auction/directPrice.do"/>
			<mapping path="/auction/auctionComplete.do"/>
			<mapping path="/auction/memberAuctionSellView.do"/>
			<mapping path="/auction/memberAuctionBuyView.do"/>
			<mapping path="/product/editAddress.do"/>
			<mapping path="/product/productEdit.do"/>
			<mapping path="/product/productRegistration.do"/>
			<mapping path="/product/productRegistrationEnd.do"/>
			<mapping path="/product/productView.do"/>
			<mapping path="/product/productDelete.do"/>
			<mapping path="/product/memberSellView.do"/>
			<mapping path="/product/memberSellDetailView.do"/>
			<mapping path="/product/sellComplete.do"/>
			<mapping path="/product/memberbuyView.do"/>
			<mapping path="/product/memberBuyDetailView.do"/>
			<mapping path="/product/fileUpload"/>
			<mapping path="/product/moreResult.do"/>
			<mapping path="/product/srchMoreResult.do"/>
			<mapping path="/member/memberUpdate.do"/>
			<mapping path="/member/memberUpdateEnd.do"/>
			<mapping path="/member/memberDelete.do"/>
			<mapping path="/member/editAddressEnd.do"/>
			<mapping path="/member/memberList.do"/>
			<mapping path="/basket/*.do"/>
			<mapping path="/comment/*.do"/>
			<mapping path="/declaration/*.do"/>
			<mapping path="/message/*.do"/>
			<mapping path="/notice/*.do"/>
			<mapping path="/review/*.do"/>
			<beans:bean id="LoginInterceptor" class="com.kh.market.common.interceptor.LoginInterceptor"/>
		</interceptor>
	</interceptors>
	<interceptors>
		<interceptor>
			<mapping path="/notice/noticeWrite"/>
			<mapping path="/notice/noticeWriteEnd.do"/>
			<mapping path="/notice/noticeUpdate"/>
			<mapping path="/notice/noticeDelete"/>
			<mapping path="/notice/noticeUpdateEnd"/>
			<mapping path="/notice/memberList.do"/>
			<mapping path="/declaration/declarationList"/>
			<mapping path="/declaration/selectOneDeclaration"/>
			<mapping path="/declaration/declarationProcess"/>
			<mapping path="/declaration/declarationCheck"/>
			<beans:bean id="AdminInterceptor" class="com.kh.market.common.interceptor.AdminInterceptor"/>
		</interceptor>
	</interceptors>
	 <!-- #13.1 파일업로드를 처리할 Resolver클래스 빈등록(빈이름 주의) -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
		<beans:property name="maxUploadSize" value="10485760" /> <!-- max 파일용량은 10MB이다. -->
	</beans:bean>
	
</beans:beans>
